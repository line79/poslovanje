# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
#server.contextPath=/line


spring.datasource.url = jdbc:h2:file:D:/Aplikacije/Poslovanje;
####spring.datasource.url = jdbc:h2:tcp://localhost:8043/mem:mytest;
spring.datasource.username = sa
spring.datasource.password =
spring.datasource.driverClassName = org.h2.Driver
#spring.datasource.jndi-name=java:/comp/env/jdbc/H2DB

#spring.datasource.url = jdbc:mysql://localhost:3306/poslovanje
#spring.datasource.username = root
#spring.datasource.password =
#spring.datasource.driverClassName = com.mysql.jdbc.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true
# spring.jpa.properties.hibernate.format_sql=true

#spring thymeleaf
spring.thymeleaf.cache = false

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.hibernate.ddl-auto = none
spring.jpa.hibernate.ddl-auto = update
#spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
#logging.level.org.springframework.ws=INFO
#logging.level.org.springframework.ws.soap.server.endpoint.interceptor=DEBUG
#logging.level.org.springframework.web=DEBUG
logging.file=logs/logging.log

#logging.level.org.thymeleaf=DEBUG
#logging.level.org.springframework.boot=DEBUG

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#spring.h2.console.settings.trace=true
spring.h2.console.settings.web-allow-others=false